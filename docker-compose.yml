# docker-compose.yml - Updated for Week 6 Celery Support
version: '3.8'

services:
  # === DATABASE ===
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === CACHE & QUEUE ===
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === BACKEND API ===
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - temp_files:/tmp/reels_generator
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # === CELERY WORKER - CONTENT QUEUE ===
  celery-worker-content:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - temp_files:/tmp/reels_generator
    depends_on:
      - postgres
      - redis
    command: celery -A app.tasks.celery_app worker --loglevel=info --queues=content --concurrency=4 --hostname=worker-content@%h

  # === CELERY WORKER - VIDEO QUEUE ===
  celery-worker-video:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - temp_files:/tmp/reels_generator
    depends_on:
      - postgres
      - redis
    # Lower concurrency for video processing
    command: celery -A app.tasks.celery_app worker --loglevel=info --queues=video --concurrency=2 --hostname=worker-video@%h

  # === CELERY WORKER - GPU QUEUE (for ultra quality) ===
  celery-worker-gpu:
    build:
      context: ./backend
      dockerfile: Dockerfile.gpu  # Special dockerfile with CUDA support
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENABLE_GPU=true
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - temp_files:/tmp/reels_generator
    depends_on:
      - postgres
      - redis
    # Single concurrency for GPU tasks
    command: celery -A app.tasks.celery_app worker --loglevel=info --queues=gpu --concurrency=1 --hostname=worker-gpu@%h
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # === CELERY BEAT SCHEDULER ===
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    command: celery -A app.tasks.celery_app beat --loglevel=info

  # === CELERY FLOWER (Monitoring) ===
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    depends_on:
      - redis
    command: celery -A app.tasks.celery_app flower --port=5555

  # === FRONTEND ===
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    command: npm run dev

  # === NGINX (Production) ===
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  media_files:
  temp_files:

networks:
  default:
    name: reels_network

---
# backend/Dockerfile.gpu - GPU-enabled worker
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3-pip \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    wget \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Install GPU-specific packages
RUN pip3 install --no-cache-dir \
    torch==2.0.1+cu118 \
    torchvision==0.15.2+cu118 \
    -f https://download.pytorch.org/whl/torch_stable.html

# Copy application code
COPY . .

# Set Python path
ENV PYTHONPATH=/app

CMD ["celery", "-A", "app.tasks.celery_app", "worker", "--loglevel=info"]

---
# backend/celeryconfig.py - Celery configuration file
"""
Celery configuration for production
"""

import os
from kombu import Queue, Exchange

# Broker settings
broker_url = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
result_backend = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

# Task settings
task_serializer = 'json'
result_serializer = 'json'
accept_content = ['json']
timezone = 'UTC'
enable_utc = True

# Task execution settings
task_acks_late = True
task_reject_on_worker_lost = True
task_ignore_result = False

# Worker settings
worker_prefetch_multiplier = 1
worker_max_tasks_per_child = 100
worker_disable_rate_limits = False

# Concurrency settings (can be overridden per worker)
worker_concurrency = 4

# Task routing
task_routes = {
    'app.tasks.content_tasks.*': {'queue': 'content'},
    'app.tasks.video_tasks.generate_video_task': {'queue': 'video'},
    'app.tasks.video_tasks.generate_advanced_video_task': {'queue': 'video'},
    'app.tasks.video_tasks.process_ultra_quality_video_task': {'queue': 'gpu'},
    'app.tasks.social_media_tasks.*': {'queue': 'social'},
    'app.tasks.monitoring.*': {'queue': 'celery'},
}

# Define queues
task_queues = (
    Queue('content', Exchange('default'), routing_key='content'),
    Queue('video', Exchange('default'), routing_key='video'),
    Queue('gpu', Exchange('priority'), routing_key='gpu'),
    Queue('social', Exchange('default'), routing_key='social'),
    Queue('celery', Exchange('default'), routing_key='celery'),
)

# Beat schedule for periodic tasks
beat_schedule = {
    'cleanup-temp-files': {
        'task': 'app.tasks.video_tasks.cleanup_temp_files',
        'schedule': 3600.0,  # Every hour
    },
    'check-failed-tasks': {
        'task': 'app.tasks.monitoring.check_failed_tasks',
        'schedule': 300.0,  # Every 5 minutes
    },
    'update-usage-statistics': {
        'task': 'app.tasks.monitoring.update_usage_statistics',
        'schedule': 600.0,  # Every 10 minutes
    },
    'cleanup-stuck-tasks': {
        'task': 'app.tasks.monitoring.cleanup_stuck_tasks',
        'schedule': 3600.0,  # Every hour
    },
    'generate-daily-report': {
        'task': 'app.tasks.monitoring.generate_daily_report',
        'schedule': crontab(hour=0, minute=0),  # Daily at midnight
    },
}

# Monitoring
worker_send_task_events = True
task_send_sent_event = True

# Error handling
task_soft_time_limit = 1800  # 30 minutes
task_time_limit = 3600  # 1 hour

# Result backend settings
result_expires = 3600  # 1 hour
result_persistent = True

# Redis settings
redis_max_connections = 100
redis_socket_keepalive = True
redis_socket_keepalive_options = {
    1: 3,  # TCP_KEEPIDLE
    2: 3,  # TCP_KEEPINTVL
    3: 3,  # TCP_KEEPCNT
}

---
# backend/supervisord.conf - Process management for production
[supervisord]
nodaemon=true

[program:celery-worker-content]
command=celery -A app.tasks.celery_app worker --loglevel=info --queues=content --concurrency=4
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/celery/worker-content.log
stderr_logfile=/var/log/celery/worker-content-error.log

[program:celery-worker-video]
command=celery -A app.tasks.celery_app worker --loglevel=info --queues=video --concurrency=2
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/celery/worker-video.log
stderr_logfile=/var/log/celery/worker-video-error.log

[program:celery-beat]
command=celery -A app.tasks.celery_app beat --loglevel=info
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/celery/beat.log
stderr_logfile=/var/log/celery/beat-error.log

[program:flower]
command=celery -A app.tasks.celery_app flower --port=5555 --basic_auth=%(ENV_FLOWER_USER)s:%(ENV_FLOWER_PASSWORD)s
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/celery/flower.log
stderr_logfile=/var/log/celery/flower-error.log

---
# infrastructure/kubernetes/celery-worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker-content
  namespace: reels-generator
spec:
  replicas: 3
  selector:
    matchLabels:
      app: celery-worker-content
  template:
    metadata:
      labels:
        app: celery-worker-content
    spec:
      containers:
      - name: worker
        image: reels-generator-backend:latest
        command: ["celery", "-A", "app.tasks.celery_app", "worker"]
        args: ["--loglevel=info", "--queues=content", "--concurrency=4"]
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: celery-secrets
              key: broker-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: database-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker-video
  namespace: reels-generator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery-worker-video
  template:
    metadata:
      labels:
        app: celery-worker-video
    spec:
      containers:
      - name: worker
        image: reels-generator-backend:latest
        command: ["celery", "-A", "app.tasks.celery_app", "worker"]
        args: ["--loglevel=info", "--queues=video", "--concurrency=2"]
        env:
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: celery-secrets
              key: broker-url
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        - name: temp-storage
          mountPath: /tmp/reels_generator
      volumes:
      - name: temp-storage
        emptyDir:
          sizeLimit: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: flower
  namespace: reels-generator
spec:
  selector:
    app: flower
  ports:
  - port: 5555
    targetPort: 5555
  type: LoadBalancer
